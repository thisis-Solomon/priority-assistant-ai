"use client";

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { getActionableSteps } from '@/lib/actions';
import type { ActionableStep, Priority } from '@/lib/types';
import { zodResolver } from '@hookform/resolvers/zod';
import { Loader2, Plus, Sparkles, Trash2 } from 'lucide-react';
import { useState } from 'react';
import { useFieldArray, useForm } from 'react-hook-form';
import { v4 as uuidv4 } from 'uuid';
import * as z from 'zod';

const formSchema = z.object({
  priorities: z.array(z.object({ text: z.string().min(5, "Priority must be at least 5 characters.") })).min(1, "Please enter at least one priority.").max(5, "You can set a maximum of 5 priorities."),
});

type MondayPriorityInputProps = {
  userRole: string;
  onPrioritiesSet: (priorities: Priority[]) => void;
};

export default function MondayPriorityInput({ userRole, onPrioritiesSet }: MondayPriorityInputProps) {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      priorities: [{ text: '' }, { text: '' }, { text: '' }],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "priorities",
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    setIsLoading(true);
    try {
      const newPriorities: Priority[] = await Promise.all(
        values.priorities
          .filter(p => p.text.trim() !== '')
          .map(async (p) => {
            const steps = await getActionableSteps(p.text, userRole);
            const actionableSteps: ActionableStep[] = steps.map(stepText => ({
              id: uuidv4(),
              text: stepText,
              isCompleted: false,
            }));

            return {
              id: uuidv4(),
              text: p.text,
              isCompleted: false,
              actionableSteps: actionableSteps,
            };
          })
      );
      
      onPrioritiesSet(newPriorities);
      
      toast({
        title: "Priorities Set!",
        description: "Your actionable steps have been generated by AI for each priority.",
      });
    } catch (error) {
      console.error(error);
      toast({
        variant: "destructive",
        title: "Uh oh! Something went wrong.",
        description: error instanceof Error ? error.message : "There was a problem processing your priorities.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-2xl">Set Your Weekly Priorities</CardTitle>
        <CardDescription>What are the most important things you want to achieve this week?</CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="space-y-4">
              {fields.map((field, index) => (
                <FormField
                  key={field.id}
                  control={form.control}
                  name={`priorities.${index}.text`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="sr-only">Priority {index + 1}</FormLabel>
                      <div className="flex items-center gap-2">
                        <FormControl>
                          <Input placeholder={`Priority #${index + 1}`} {...field} />
                        </FormControl>
                        {fields.length > 1 && (
                            <Button type="button" variant="ghost" size="icon" onClick={() => remove(index)}>
                                <Trash2 className="h-4 w-4 text-muted-foreground" />
                            </Button>
                        )}
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              ))}
            </div>
            {fields.length < 5 &&
              <Button type="button" variant="outline" size="sm" onClick={() => append({text: ''})}>
                  <Plus className="mr-2 h-4 w-4" /> Add Priority
              </Button>
            }
            <Button type="submit" className="w-full" disabled={isLoading}>
              <span className="flex items-center justify-center">
                {isLoading ? (
                  <Loader2 key="loading-icon" className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Sparkles key="sparkles-icon" className="mr-2 h-4 w-4" />
                )}
                Set Priorities & Get Insights
              </span>
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
