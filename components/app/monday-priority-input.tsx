"use client";

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { getActionableSteps } from '@/lib/actions';
import { ActionableStep, Priority } from '@/lib/types';
import { zodResolver } from '@hookform/resolvers/zod';
import { Loader2, Plus, Sparkles, Trash2 } from 'lucide-react';
import { useState } from 'react';
import { FormProvider, useFieldArray, useForm } from 'react-hook-form';
import { v4 as uuidv4 } from 'uuid';
import * as z from 'zod';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '../ui/card';
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '../ui/form';

const formSchema = z.object({
  priorities: z
    .array(
      z.object({
        text: z
          .string()
          .min(5, 'Priority must be at least 5 characters.')
          .trim(),
      }),
    )
    .min(1, 'Please enter at least one priority.')
    .max(5, 'You can set a maximum of 5 priorities.'),
});

type MondayPriorityInputProps = {
  userRole: string;
  onPrioritiesSet: (priorities: Priority[]) => void;
};

export default function MondayPriorityInput({
  userRole,
  onPrioritiesSet,
}: MondayPriorityInputProps) {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      priorities: [{ text: '' }],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: 'priorities',
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    setIsLoading(true);
    try {
      const newPriorities: Priority[] = await Promise.all(
        values.priorities
          .filter((p) => p.text.trim() !== '')
          .map(async (p) => {
            const steps = (await getActionableSteps(p.text, userRole)) ?? [];

            const actionableSteps: ActionableStep[] = steps.map((stepText) => ({
              id: uuidv4(),
              text: stepText,
              isCompleted: false,
            }));

            const priority: Priority = {
              id: uuidv4(),
              text: p.text.trim(),
              isCompleted: false,
              actionableSteps,
            };

            return priority;
          }),
      );

      onPrioritiesSet(newPriorities);

      toast({
        title: 'Priorities Set!',
        description:
          'Your actionable steps have been generated by AI for each priority.',
      });
    } catch (error) {
      console.error(error);
      toast({
        variant: 'destructive',
        title: 'Uh oh! Something went wrong.',
        description:
          error instanceof Error
            ? error.message
            : JSON.stringify(error, null, 2),
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-2xl">Set Your Weekly Priorities</CardTitle>
        <CardDescription>
          What are the most important things you want to achieve this week?
        </CardDescription>
      </CardHeader>
      <CardContent>
        <FormProvider {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="space-y-4">
              {fields.map((field, index) => {
                return (
                  <FormField
                    key={field.id} 
                    control={form.control}
                    name={`priorities.${index}.text` as const}
                    render={({ field: rhfField }) => (
                      <FormItem>
                        <FormLabel className="sr-only">Priority {index + 1}</FormLabel>
                        <div className="flex items-center gap-2">
                          <FormControl>
                            <Input
                              placeholder={`Priority #${index + 1}`}
                              {...rhfField} 
                            />
                          </FormControl>
                          {fields.length > 1 && (
                            <Button
                              type="button"
                              variant="ghost"
                              size="icon"
                              onClick={() => remove(index)}
                            >
                              <Trash2 className="h-4 w-4 text-muted-foreground" />
                            </Button>
                          )}
                        </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              );
            })}
            </div>
            {fields.length < 5 && (
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => append({ text: '' })}
              >
                <Plus className="mr-2 h-4 w-4" /> Add Priority
              </Button>
            )}
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Set Priorities &amp; Get Insights
                </>
              ) : (
                <>
                  <Sparkles className="mr-2 h-4 w-4" />
                  Set Priorities &amp; Get Insights
                </>
              )}
            </Button>
          </form>
        </FormProvider>
      </CardContent>
    </Card>
  );
}
